#include <windows.h>
#include <iostream>
#include <vss.h>
#include <vswriter.h>
#include <vsbackup.h>

#pragma comment(lib, "VssApi.lib")

void CreateShadowCopy() {
    IVssBackupComponents* pBackupComponents = nullptr;
    HRESULT hr = CreateVssBackupComponents(&pBackupComponents);
    if (FAILED(hr)) {
        std::cerr << "Failed to create VSS backup components. Error: " << hr << std::endl;
        return;
    }

    hr = pBackupComponents->InitializeForBackup();
    if (FAILED(hr)) {
        std::cerr << "Failed to initialize for backup. Error: " << hr << std::endl;
        pBackupComponents->Release();
        return;
    }

    VSS_ID snapshotSetId = GUID_NULL;
    hr = pBackupComponents->StartSnapshotSet(&snapshotSetId);
    if (FAILED(hr)) {
        std::cerr << "Failed to start snapshot set. Error: " << hr << std::endl;
        pBackupComponents->Release();
        return;
    }

    VSS_ID snapshotId = GUID_NULL;
    hr = pBackupComponents->AddToSnapshotSet(L"C:\\", GUID_NULL, &snapshotId);
    if (FAILED(hr)) {
        std::cerr << "Failed to add to snapshot set. Error: " << hr << std::endl;
        pBackupComponents->Release();
        return;
    }

    hr = pBackupComponents->DoSnapshotSet(nullptr, nullptr);
    if (FAILED(hr)) {
        std::cerr << "Failed to create snapshot. Error: " << hr << std::endl;
        pBackupComponents->Release();
        return;
    }

    VSS_SNAPSHOT_PROP snapshotProp;
    hr = pBackupComponents->GetSnapshotProperties(snapshotId, &snapshotProp);
    if (FAILED(hr)) {
        std::cerr << "Failed to get snapshot properties. Error: " << hr << std::endl;
        pBackupComponents->Release();
        return;
    }

    std::wcout << L"Snapshot created at: " << snapshotProp.m_pwszSnapshotDeviceObject << std::endl;

    // Освобождение ресурсов
    pBackupComponents->Release();
    VssFreeSnapshotProperties(&snapshotProp);
}

int main() {
    CreateShadowCopy();
    return 0;
}
